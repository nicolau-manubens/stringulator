{"version":3,"sources":["webpack:///./src/components/InputRadio.vue","webpack:///./src/components/InputRadio.vue?b4b3","webpack:///./node_modules/uuid/dist/esm-browser/rng.js","webpack:///./node_modules/uuid/dist/esm-browser/regex.js","webpack:///./node_modules/uuid/dist/esm-browser/validate.js","webpack:///./node_modules/uuid/dist/esm-browser/stringify.js","webpack:///./node_modules/uuid/dist/esm-browser/v4.js"],"names":["class","id","fieldId","localModelValue","value","option","type","label","for","name","props","modelValue","String","emits","computed","get","this","set","$emit","render","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","test","byteToHex","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","i"],"mappings":"4IACSA,MAAM,gC,gDAAX,eAaM,MAbN,EAaM,C,eAZF,eAKmB,SAJRC,GAAI,EAAAC,Q,qDACF,EAAAC,gBAAe,IACjBC,MAAO,EAAAC,OACdL,MAAM,mBACNM,KAAK,S,gCAHI,EAAAH,mBAKH,EAAAI,O,iBADV,eAKQ,S,MAHGC,IAAK,EAAAN,QACZF,MAAM,oB,eACH,EAAAO,OAAK,Y,wCAQL,GACXE,KAAM,aAENC,MAAO,CACHC,WAAY,CACRL,KAAMM,QAGVP,OAAQ,CACJC,KAAMM,QAGVL,MAAO,CACHD,KAAMM,SAIdC,MAAO,CACH,oBAAqB,CACjBP,KAAMM,SAIdE,SAAU,CACNZ,QADM,WAEF,4BAAsB,mBAG1BC,gBAAiB,CACbY,IADa,WAET,OAAOC,KAAKL,YAGhBM,IALa,SAKRN,GACDK,KAAKE,MAAM,oBAAqBP,OCnDhD,EAAOQ,OAASA,EAED,gB,kCCFf,IAAIC,EACAC,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAKH,IAGHA,EAAoC,qBAAXI,QAA0BA,OAAOJ,iBAAmBI,OAAOJ,gBAAgBK,KAAKD,SAA+B,qBAAbE,UAAgE,oBAA7BA,SAASN,iBAAkCM,SAASN,gBAAgBK,KAAKC,WAElON,GACH,MAAM,IAAIO,MAAM,4GAIpB,OAAOP,EAAgBC,GCjBV,4HCEf,SAASO,EAASC,GAChB,MAAuB,kBAATA,GAAqB,EAAMC,KAAKD,GCKhD,IDFe,QCAXE,EAAY,GAEP,EAAI,EAAG,EAAI,MAAO,EACzBA,EAAUC,MAAM,EAAI,KAAOC,SAAS,IAAIC,OAAO,IAGjD,SAASC,EAAUC,GACjB,IAAIC,EAASC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAG7ET,GAAQE,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,MAAMI,cAMzf,IAAK,EAASZ,GACZ,MAAMa,UAAU,+BAGlB,OAAOb,EAGM,QC1Bf,SAASc,EAAGC,EAASC,EAAKR,GACxBO,EAAUA,GAAW,GACrB,IAAIE,EAAOF,EAAQG,SAAWH,EAAQrB,KAAOA,KAK7C,GAHAuB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPR,EAASA,GAAU,EAEnB,IAAK,IAAIW,EAAI,EAAGA,EAAI,KAAMA,EACxBH,EAAIR,EAASW,GAAKF,EAAKE,GAGzB,OAAOH,EAGT,OAAO,EAAUC,GAGJ","file":"js/chunk-ea7067ac.0c8ef5a3.js","sourcesContent":["<template>\n    <div class=\"form-check form-check-inline\">\n        <input\n            v-bind:id=\"fieldId\"\n            v-model=\"localModelValue\"\n            v-bind:value=\"option\"\n            class=\"form-check-input\"\n            type=\"radio\" />\n        <label\n            v-if=\"label\"\n            v-bind:for=\"fieldId\"\n            class=\"form-check-label\">\n            {{ label }}\n        </label>\n    </div>\n</template>\n\n<script>\nimport { v4 as uuid } from 'uuid';\n\nexport default {\n    name: 'InputRadio',\n\n    props: {\n        modelValue: {\n            type: String,\n        },\n\n        option: {\n            type: String,\n        },\n\n        label: {\n            type: String,\n        },\n    },\n\n    emits: {\n        'update:modelValue': {\n            type: String,\n        },\n    },\n\n    computed: {\n        fieldId () {\n            return `input-radio-${uuid()}`;\n        },\n\n        localModelValue: {\n            get () {\n                return this.modelValue;\n            },\n\n            set (modelValue) {\n                this.$emit('update:modelValue', modelValue);\n            },\n        },\n    },\n};\n</script>\n","import { render } from \"./InputRadio.vue?vue&type=template&id=ac7bcc08\"\nimport script from \"./InputRadio.vue?vue&type=script&lang=js\"\nexport * from \"./InputRadio.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}